runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("ggrepel")
install.packages("ggrepel")
install.packages("ggrepel")
install.packages("ggrepel")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny); runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
?ggsave
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
runApp('appTMP.R')
shiny::runApp()
runApp()
runApp()
shiny::runApp()
newdatatmp <- mydataViiva[ which(mydataViiva$kouala==input$viivaKouala
& mydataViiva$muuttuja == input$viivaMuutKouala), ]
mydataViiva = read.csv(file="tyoelamataidotViivaVuosittain.csv", header = TRUE, sep = ";", encoding="UTF-8")
newdatatmp <- mydataViiva[ which(mydataViiva$kouala==input$viivaKouala
& mydataViiva$muuttuja == input$viivaMuutKouala), ]
newdatatmp <- mydataViiva[ which(mydataViiva$kouala==1041
& mydataViiva$muuttuja == 2), ]
View(newdatatmp)
View(newdatatmp)
koualanimitmp <- newdata[1,]
koualanimitmp <- newdatatmp[1,]
View(koualanimitmp)
runApp()
View(koualanimitmp)
runApp()
setwd("C:/Users/Tuukka/Desktop/IODS-final")
full_data = read.csv("gov_data_org.csv", sep=";", dec=".", header = TRUE)
runApp('C:/Users/Tuukka/Desktop/osaamistutka/tietotaitovastavuusbarometri')
runApp('C:/Users/Tuukka/Desktop/osaamistutka/tietotaitovastavuusbarometri')
runApp('C:/Users/Tuukka/Desktop/osaamistutka/tietotaitovastavuusbarometri')
runApp('C:/Users/Tuukka/Desktop/osaamistutka/tietotaitovastavuusbarometri')
runApp('C:/Users/Tuukka/Desktop/osaamistutka/tietotaitovastavuusbarometri')
runApp('C:/Users/Tuukka/Desktop/osaamistutka/tietotaitovastavuusbarometri')
runApp('C:/Users/Tuukka/Desktop/osaamistutka/tietotaitovastavuusbarometri')
#Needed libraries
library(GGally)
library(ggplot2)
library(corrplot)
library(tidyr)
library(dplyr)
library(cluster)
library(fpc)
#Reading the dataset. The dataset is read from my GitHub-page.
#After reading citynames are used as rownames so after that running number and citynames can be removed from the dataset
trust_dataTMP <- read.csv("https://raw.githubusercontent.com/tvkangas/IODS-final/master/trustdata.csv", sep=",", dec=".", header = TRUE)
rownames(trust_dataTMP) <- trust_dataTMP$city
trust_dataTMP <- dplyr::select(trust_dataTMP, -X)
trust_dataTMP <- dplyr::select(trust_dataTMP, -city)
#After bringing the dataset, there are some summaries about the data.
#First column in the dataset can't be used because it is factorial variable containing the country
str(trust_dataTMP)
summary(trust_dataTMP)
ggpairs(data = trust_dataTMP, columns = 2:ncol(trust_dataTMP), axisLabels = "none")
trust_dataTMPcor <- dplyr::select(trust_dataTMP, -country)
cor_matrix<-cor(trust_dataTMPcor)
cor_matrix %>% round(digits = 2)
corrplot(cor_matrix, method="circle", type="lower", cl.pos = "r", tl.pos = "d", tl.cex = 0.6, tl.col="black")
#The column country has to be ignored in the scaling.
#Column is added later back
trust_data<- scale(trust_dataTMP[, -c(1)])
countries <- dplyr::select(trust_dataTMP, country)
trust_data <- cbind(trust_data, countries)
#Different methods for distance measurements
#Column country needs to be removed for distance measurements because it's not numeric
#City population needs to be removed because there is few outliers that effects too much to data
#Capital is another variable that effects too much for clustering, so I will remove it also
dist_data <- dplyr::select(trust_dataTMP, -country)
dist_data <- dplyr::select(dist_data, -citypop)
dist_data <- dplyr::select(dist_data, -capital)
dist_eu <- dist(dist_data, method = "euclidean") #euclidean
dist_man <- dist(dist_data, method = "manhattan") #manhattan
dist_min <- dist(dist_data, method = "minkowski") #minkowski
summary(dist_eu)
summary(dist_man)
summary(dist_min)
#Next chunk of code gives a graph from where suitable number of cluster can be determined.
set.seed(12)
k_max <- 10
twcss_eu <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
plot(1:k_max, twcss_eu, type='b', xlab="Number of clusters", ylab="Total within-cluster sum of squares", main = "Euclidean distance")
twcss_man <- sapply(1:k_max, function(k){kmeans(dist_man, k)$tot.withinss})
plot(1:k_max, twcss_man, type='b', xlab="Number of clusters", ylab="Total within-cluster sum of squares", main = "Manhattan distance")
km_eu_2 <-kmeans(dist_eu, centers = 2)
km_man_2 <-kmeans(dist_man, centers = 2)
km_man_3 <- kmeans(dist_man, centers = 3)
#For saving some space I will display now only the most important value "within cluster sum of squares by cluster"
print(paste0("Euclidian, 2 centroids: ", round(km_eu_2$betweenss / km_eu_2$totss, 3)))
print(paste0("Manhattan, 2 centroids: ", round(km_man_2$betweenss / km_man_2$totss,3 )))
print(paste0("Manhattan, 3 centroids: ", round(km_man_3$betweenss / km_man_3$totss, 3)))
km_man_3
#clusplot(dist_data, km_man_3$cluster, color=TRUE, col.p = c("BLACK", "RED", "BLUE"),shade=FALSE,
#labels=2, lines=0, main=("Bivariate Cluster Plot"))
dist_data$cluster=factor(km_man_3$cluster)
centers=as.data.frame(km_man_3$centers)
#ggplot(data=dist_data, aes(x=safe, y=trust, color=cluster, label = rownames(dist_data) )) +
#geom_point() +
#geom_text()
km_man_3$cluster
trust_data$cluster <- km_man_3$cluster
fit <- aov(y ~ cluster, data=trust_data)
fit <- aov(faircourt ~ cluster, data=trust_data)
fit
summary(fit)
trust_data$cluster<- km_man_3$cluster
fit <- aov(faircourt ~ cluster, data=trust_data)
summary(fit)
fit <- aov(faircourt ~ cluster, data=trust_data)
summary(fit)
fit <- aov(safe ~ cluster, data=trust_data)
summary(fit)
summary(aov(safe ~ cluster, data=trust_data))
summary(aov(faircourt ~ cluster, data=trust_data))
summary(aov(safe ~ cluster, data=trust_data))
summary(aov(workdis ~ cluster, data=trust_data))
summary(aov(trust ~ cluster, data=trust_data))
summary(aov(corruption ~ cluster, data=trust_data))
summary(aov(freedom ~ cluster, data=trust_data))
summary(aov(bribe ~ cluster, data=trust_data))
summary(aov(houdem ~ cluster, data=trust_data))
summary(aov(busfine ~ cluster, data=trust_data))
summary(aov(govopen ~ cluster, data=trust_data))
summary(aov(lawful ~ cluster, data=trust_data))
summary(aov(faircourt ~ cluster, data=trust_data))
summary(aov(safe ~ cluster, data=trust_data))
summary(aov(workdis ~ cluster, data=trust_data))
summary(aov(trust ~ cluster, data=trust_data))
summary(aov(corruption ~ cluster, data=trust_data))
summary(aov(freedom ~ cluster, data=trust_data))
summary(aov(bribe ~ cluster, data=trust_data))
summary(aov(houdem ~ cluster, data=trust_data))
summary(aov(busfine ~ cluster, data=trust_data))
summary(aov(govopen ~ cluster, data=trust_data))
summary(aov(lawful ~ cluster, data=trust_data))
summary(aov(faircourt ~ cluster, data=trust_data))
summary(aov(safe ~ cluster, data=trust_data))
summary(aov(workdis ~ cluster, data=trust_data))
summary(aov(trust ~ cluster, data=trust_data))
summary(aov(corruption ~ cluster, data=trust_data))
summary(aov(freedom ~ cluster, data=trust_data))
summary(aov(bribe ~ cluster, data=trust_data))
summary(aov(houdem ~ cluster, data=trust_data))
#summary(aov(busfine ~ cluster, data=trust_data))
summary(aov(govopen ~ cluster, data=trust_data))
summary(aov(lawful ~ cluster, data=trust_data))
summary(aov(faircourt ~ cluster, data=trust_data))
summary(aov(safe ~ cluster, data=trust_data))
summary(aov(workdis ~ cluster, data=trust_data))
summary(aov(trust ~ cluster, data=trust_data))
summary(aov(corruption ~ cluster, data=trust_data))
summary(aov(freedom ~ cluster, data=trust_data))
summary(aov(bribe ~ cluster, data=trust_data))
#summary(aov(houdem ~ cluster, data=trust_data))
#summary(aov(busfine ~ cluster, data=trust_data))
summary(aov(govopen ~ cluster, data=trust_data))
summary(aov(lawful ~ cluster, data=trust_data))
fitfreedom <- aov(freedom ~ cluster, data=trust_data)
fitgovopen <- aov(govopen ~ cluster, data=trust_data)
plot(fitfreedom)
plot(fitgovopen)
kruskal.test(freedom ~ cluster, data=trust_data)
kruskal.test(freedom ~ cluster, data=trust_data)
ggplot(data=dist_data, aes(x=govopen, y=freedom, color=cluster, label = rownames(dist_data) )) +
geom_point() +
geom_text()
ggplot(data=dist_data, aes(x=govopen, y=freedom, color=cluster, label = rownames(dist_data) )) +
geom_point() +
geom_text() +
labs(x = "Openess of governent")
ggplot(data=dist_data, aes(x=govopen, y=freedom, color=cluster, label = rownames(dist_data) )) +
geom_point() +
geom_text() +
labs(x = "Openess of governent", y="Freedom") +
ggplot(data=dist_data, aes(x=govopen, y=freedom, color=cluster, label = rownames(dist_data) )) +
geom_point() +
geom_text() +
labs(x = "Openess of governent", y="Freedom")
?labs
ggplot(data=dist_data, aes(x=govopen, y=freedom, color=cluster, label = rownames(dist_data) )) +
geom_point() +
geom_text() +
labs(x = "Openess of governance", y="Freedom", title="Scatter plot")
ggplot(data=dist_data, aes(x=govopen, y=freedom, color=cluster, label = rownames(dist_data) )) +
geom_point() +
geom_text() +
labs(x = "Openess of governance", y="Freedom", title="Scatter plot, visualization of different clusters")
ggplot(data=dist_data, aes(x=govopen, y=freedom, color=cluster, label = rownames(dist_data) )) +
geom_point() +
geom_text() +
labs(x = "Openess of governance", y="Freedom", title="Scatter plot, visualization of different clusters")
library(shiny)
library(shiny)
library(ggplot2)
inputPanel(
selectInput("varx", label = "x-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 1),
selectInput("vary", label = "y-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 1)
)
renderPlot({
ggplot(data=dist_data, aes(x=govopen, y=freedom, color=cluster, label = rownames(dist_data) )) +
geom_point() +
geom_text() +
labs(x = "Openess of governance", y="Freedom", title="Scatter plot, visualization of different clusters")
})
View(dist_data)
write.csv(data_final, file="dist_data.csv")
#Different methods for distance measurements
#Column country needs to be removed for distance measurements because it's not numeric
#City population needs to be removed because there is few outliers that effects too much to data
#Capital is another variable that effects too much for clustering, so I will remove it also
dist_data <- dplyr::select(trust_dataTMP, -country)
dist_data <- dplyr::select(dist_data, -citypop)
dist_data <- dplyr::select(dist_data, -capital)
dist_eu <- dist(dist_data, method = "euclidean") #euclidean
dist_man <- dist(dist_data, method = "manhattan") #manhattan
dist_min <- dist(dist_data, method = "minkowski") #minkowski
summary(dist_eu)
summary(dist_man)
summary(dist_min)
write.csv(dist_data, file="dist_data.csv")
dist_data <- read.csv("dist_data.csv", sep=",", dec=".", header = TRUE)
inputPanel(
selectInput("varx", label = "x-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 1),
selectInput("vary", label = "y-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 1)
)
renderPlot({
ggplot(data=dist_data, aes(x=govopen, y=freedom, color=cluster, label = rownames(dist_data) )) +
geom_point() +
geom_text() +
labs(x = "Openess of governance", y="Freedom", title="Scatter plot, visualization of different clusters")
})
km_man_3
#clusplot(dist_data, km_man_3$cluster, color=TRUE, col.p = c("BLACK", "RED", "BLUE"),shade=FALSE,
#labels=2, lines=0, main=("Bivariate Cluster Plot"))
dist_data$cluster=factor(km_man_3$cluster)
centers=as.data.frame(km_man_3$centers)
trust_data$cluster<- km_man_3$cluster
write.csv(trust_data, file="visudata.csv")
visudata <- read.csv("visu.csv", sep=",", dec=".", header = TRUE)
inputPanel(
selectInput("varx", label = "x-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 1),
selectInput("vary", label = "y-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 1)
)
renderPlot({
ggplot(data=dist_data, aes(x=govopen, y=freedom, color=cluster, label = rownames(dist_data) )) +
geom_point() +
geom_text() +
labs(x = "Openess of governance", y="Freedom", title="Scatter plot, visualization of different clusters")
})
visudata <- read.csv("visu.csv", sep=",", dec=".", header = TRUE)
getwd()
visudata <- read.csv("visudata.csv", sep=",", dec=".", header = TRUE)
inputPanel(
selectInput("varx", label = "x-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 1),
selectInput("vary", label = "y-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 1)
)
renderPlot({
ggplot(data=visudata, aes(x=govopen, y=freedom, color=cluster, label = rownames(visudata) )) +
geom_point() +
geom_text() +
labs(x = "Openess of governance", y="Freedom", title="Scatter plot, visualization of different clusters")
})
visudata <- read.csv("visudata.csv", sep=",", dec=".", header = TRUE)
rownames(visudata) <- visudata$X
inputPanel(
selectInput("varx", label = "x-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 1),
selectInput("vary", label = "y-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 1)
)
renderPlot({
ggplot(data=visudata, aes(x=govopen, y=freedom, color=cluster, label = rownames(visudata) )) +
geom_point() +
geom_text() +
labs(x = "Openess of governance", y="Freedom", title="Scatter plot, visualization of different clusters")
})
rownames(visudata) <- visudata$X
visudata <- read.csv("visudata.csv", sep=",", dec=".", header = TRUE)
rownames(visudata) <- visudata$X
View(visudata)
library(shiny)
library(ggplot2)
library(dplyr)
visudata <- read.csv("visudata.csv", sep=",", dec=".", header = TRUE)
rownames(visudata) <- visudata$X
visudata <- dplyr::select(visudata, -X)
inputPanel(
selectInput("varx", label = "x-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 1),
selectInput("vary", label = "y-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 1)
)
renderPlot({
ggplot(data=visudata, aes(x=govopen, y=freedom, color=cluster, label = rownames(visudata) )) +
geom_point() +
geom_text() +
labs(x = "Openess of governance", y="Freedom", title="Scatter plot, visualization of different clusters")
})
visudata <- read.csv("visudata.csv", sep=",", dec=".", header = TRUE)
rownames(visudata) <- visudata$X
visudata <- dplyr::select(visudata, -X)
inputPanel(
selectInput("varx", label = "x-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 1),
selectInput("vary", label = "y-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 1)
)
renderPlot({
ggplot(data=visudata, aes(x=govopen, y=freedom, color=cluster, label = rownames(visudata) )) +
geom_point() +
geom_text() +
labs(x = "Openess of governance", y="Freedom", title="Scatter plot, visualization of different clusters")
})
visudata <- read.csv("visudata.csv", sep=",", dec=".", header = TRUE)
rownames(visudata) <- visudata$X
visudata <- dplyr::select(visudata, -X)
inputPanel(
selectInput("varx", label = "x-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 1),
selectInput("vary", label = "y-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 1)
)
renderPlot({
ggplot(data=visudata, aes(x=input$varx, y=input$vary, color=cluster, label = rownames(visudata) )) +
geom_point() +
geom_text() +
labs(x = input$varx, y=input$vary, title="Scatter plot, visualization of different clusters")
})
visudata <- read.csv("visudata.csv", sep=",", dec=".", header = TRUE)
visudata <- read.csv("visudata.csv", sep=";", dec=".", header = TRUE)
visudata <- read.csv("visudata.csv", sep=";", dec=".", header = TRUE)
visudata <- read.csv("visudata.csv", sep=",", dec=".", header = TRUE)
visudata <- read.csv("visudata.csv", sep=",", dec=".", header = TRUE)
trust_dataTMP <- read.csv("https://raw.githubusercontent.com/tvkangas/IODS-final/master/visudata.csv", sep=",", dec=".", header = TRUE)
visudata <- read.csv("https://raw.githubusercontent.com/tvkangas/IODS-final/master/visudata.csv", sep=",", dec=".", header = TRUE)
visudata <- read.csv("https://raw.githubusercontent.com/tvkangas/IODS-final/master/visudata.csv", sep=",", dec=".", header = TRUE)
View(visudata)
visudata <- read.csv("https://github.com/tvkangas/IODS-final/blob/master/visudata.csv", sep=",", dec=".", header = TRUE)
View(visudata)
visudata <- read.csv("https://raw.githubusercontent.com/tvkangas/IODS-final/master/visualdata.csv", sep=",", dec=".", header = TRUE)
View(visudata)
View(trust_data)
visudata <- read.csv("visual_data.csv", sep=",", dec=".", header = TRUE)
View(visudata)
visudata <- read.csv("visual_data.csv", sep=",", dec=".", header = TRUE)
visudata <- read.csv("visual_data.csv", sep=",", dec=".", header = TRUE)
visudata <- read.csv("visual_data.csv", sep=",", dec=".", header = TRUE)
visudata <- read.csv("visual_data.csv", sep=",", dec=".", header = TRUE)
visudata <- read.csv("visual_data.csv", sep=",", dec=".", header = TRUE)
View(visudata)
visudata <- read.csv("visual_data.csv", sep=";", dec=".", header = TRUE)
visudata <- read.csv("visual_data.csv", sep=",", dec=".", header = TRUE)
visuAdata <- read.csv("visual_data.csv", sep=",", dec=".", header = TRUE)
visudata <- read.csv("visual_data.csv", sep=",", dec=".", header = TRUE)
rownames(visudata) <- visudata$city
View(visuAdata)
colnames(visudata)[which(names(visudata) == "X1")] <- "1"
View(visuAdata)
visudata <- read.csv("visual_data.csv", sep=",", dec=".", header = TRUE)
rownames(visudata) <- visudata$city
visudata <- dplyr::select(visudata, -city)
colnames(visudata)[which(names(visudata) == X1)] <- "1"
inputPanel(
selectInput("varx", label = "x-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 1),
selectInput("vary", label = "y-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 11)
)
renderPlot({
ggplot(data=visudata, aes(x=input$varx, y=input$vary, color=cluster, label = rownames(visudata) )) +
geom_point() +
geom_text() +
labs(x = input$varx, y=input$vary, title="Scatter plot, visualization of different clusters")
})
visudata <- read.csv("visual_data.csv", sep=",", dec=".", header = TRUE)
rownames(visudata) <- visudata$city
visudata <- dplyr::select(visudata, -city)
colnames(visudata)[which(names(visudata) == "var1")] <- "1"
colnames(visudata)[which(names(visudata) == "var11")] <- "11"
visudata <- read.csv("visual_data.csv", sep=",", dec=".", header = TRUE)
visudata <- read.csv("visual_data.csv", sep=",", dec=".", header = TRUE)
rownames(visudata) <- visudata$city
visudata <- dplyr::select(visudata, -city)
colnames(visudata)[which(names(visudata) == "var1")] <- "1"
colnames(visudata)[which(names(visudata) == "var11")] <- "11"
visudata <- read.csv("visual_data.csv", sep=",", dec=".", header = TRUE)
rownames(visudata) <- visudata$city
visudata <- dplyr::select(visudata, -city)
colnames(visudata)[which(names(visudata) == "var1")] <- "1"
colnames(visudata)[which(names(visudata) == "var11")] <- "11"
inputPanel(
selectInput("varx", label = "x-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 1),
selectInput("vary", label = "y-variable",
choices = c("faircourt" = 1, "safe" = 2, "break" = 3, "workdis" = 4, "trust" = 5, "corruption" = 6, "freedom" = 7, "bribe" = 8, "houdem" =9 , "busfine" = 10, "govopen" = 11, "lawful"=12), selected = 11)
)
renderPlot({
ggplot(data=visudata, aes(x=1, y=2, color=cluster, label = rownames(visudata) )) +
geom_point() +
geom_text() +
labs(x = input$varx, y=input$vary, title="Scatter plot, visualization of different clusters")
})
visudata <- read.csv("visual_data.csv", sep=",", dec=".", header = TRUE)
rownames(visudata) <- visudata$city
visudata <- dplyr::select(visudata, -city)
inputPanel(
selectInput(inputId ="varx", label = "x-variable",
choices = c("faircourt" = 'var1', "safe" = 'var2', "break" = 'var3', "workdis" = 'var4', "trust" = 'var5', "corruption" = 'var6', "freedom" = 'var7', "bribe" = 'var8', "houdem" ='var9', "busfine" = 'var10', "govopen" = 'var11', "lawful"='var12'), selected = 'var1'),
selectInput(inputId ="vary", label = "y-variable",
choices = c("faircourt" = 'var1', "safe" = 'var2', "break" = 'var3', "workdis" = 'var4', "trust" = 'var5', "corruption" = 'var6', "freedom" = 'var7', "bribe" = 'var8', "houdem" ='var9', "busfine" = 'var10', "govopen" = 'var11', "lawful"='var12'), selected = 'var11')
)
renderPlot({
ggplot(data=visudata, aes(x=var2, y=var3, color=cluster, label = rownames(visudata) )) +
geom_point() +
geom_text() +
labs(x = input$varx, y=input$vary, title="Scatter plot, visualization of different clusters")
})
?labs

geom_line(aes(y=testingError, colour = "red")) +
geom_point()
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError, colour = "black")) +
geom_line(aes(y=testingError, colour = "red")) +
geom_point(aes(y=testingError)
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError, colour = "black")) +
geom_line(aes(y=testingError, colour = "red")) +
geom_point(aes(y=testingError))
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError, colour = "blue")) +
geom_line(aes(y=testingError, colour = "red")) +
geom_point(aes(y=testingError))
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError)) +
geom_line(aes(y=testingError)) +
geom_point(aes(y=testingError))
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError)) +
geom_point(aes(y=testingError))
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError), colour="red") +
geom_point(aes(y=testingError))
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError), colour="red") +
geom_point(aes(y=testingError), colour="red")
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError), colour="red") +
geom_point(aes(y=testingError), colour="red") +
geom_point(aes(y=trainingError), colour="blue")
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError), colour="red") +
geom_point(aes(y=testingError), colour="red") +
geom_point(aes(y=trainingError), colour="blue") +
ggtitle("Training and testing error with number of variables")
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError), colour="red") +
geom_point(aes(y=testingError), colour="red") +
geom_point(aes(y=trainingError), colour="blue") +
ggtitle("Training and testing error with number of variables") +
labs(y = "Value")
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError), colour="red") +
geom_point(aes(y=testingError), colour="red") +
geom_point(aes(y=trainingError), colour="blue") +
ggtitle("Training and testing error with number of variables") +
labs(y = "Value", x = "Number of variables")
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError), colour="red") +
geom_point(aes(y=testingError), colour="red") +
geom_point(aes(y=trainingError), colour="blue") +
ggtitle("Training and testing error with number of variables") +
labs(y = "Value", x = "Number of variables", caption = "Blue:     training error, Red: testing error")
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError), colour="red") +
geom_point(aes(y=testingError), colour="red") +
geom_point(aes(y=trainingError), colour="blue") +
ggtitle("Training and testing error with number of variables") +
labs(y = "Value", x = "Number of variables", caption = "Blues is for training error and red for testing error")
resultsFrame
ggplot(data=resultsFrame, aes(x=numbVar)) +
geom_line(aes(y=trainingError), colour="blue") +
geom_line(aes(y=testingError), colour="red") +
geom_point(aes(y=testingError), colour="red") +
geom_point(aes(y=trainingError), colour="blue") +
ggtitle("Training and testing error with number of variables") +
labs(y = "Value", x = "Number of variables", caption = "Blues is for training error and red for testing error")
?rnorm
tuloksetX <- rnorm(n = 1000, mean = 2238.83)
tuloksetX <- rnorm(n = 1000, mean = 2238.83, sd = 420.493)
tuloksetY <- rnorm(n= 1000, mean = 1904.93, sd = 306.068)
tuloksetX
plot(tuloksetX, tuloksetY)
tuloksetX <- rnorm(n = 1000, mean = 2238.83, sd = 400)
tuloksetY <- rnorm(n= 1000, mean = 1904.93, sd = 300)
plot(tuloksetX, tuloksetY)
tuloksetX <- rnorm(n = 1000, mean = 2238.83, sd = 4)
tuloksetY <- rnorm(n= 1000, mean = 1904.93, sd = 3)
plot(tuloksetX, tuloksetY)
tuloksetX <- rnorm(n = 1000, mean = 2238.83, sd = 400)
tuloksetY <- rnorm(n= 1000, mean = 1904.93, sd = 300)
plot(tuloksetX, tuloksetY)
data("Boston")
summary(Boston)
library(MASS)
library(corrplot)
install.packages()
install.packages("corrplot")
library(MASS)
library(corrplot)
library(tidyverse)
install.packages("tidyverse")
library(MASS)
library(corrplot)
library(tidyverse)
library(tidyr)
library(dplyr)
data("Boston")
summary(Boston)
str(Boston)
pairs(Boston)
cor_matrix<-cor(Boston)
cor_matrix %>% round(digits = 2)
corrplot(cor_matrix, method="square", type="lower", cl.pos = "r", tl.pos = "d", tl.cex = 0.6, tl.col="black")
data("Boston")
cor_matrix<-cor(Boston)
cor_matrix %>% round(digits = 2)
summary(Boston)
str(Boston)
pairs(Boston)
corrplot(cor_matrix, method="square", type="lower", cl.pos = "r", tl.pos = "d", tl.cex = 0.6, tl.col="black")
summary(Boston)
str(Boston)
pairs(Boston)
corrplot(cor_matrix, method="square", type="lower", cl.pos = "b", tl.pos = "d", tl.cex = 0.6, tl.col="black")
summary(Boston)
str(Boston)
pairs(Boston)
corrplot(cor_matrix, method="circle", type="lower", cl.pos = "r", tl.pos = "d", tl.cex = 0.6, tl.col="black")
summary(Boston)
str(Boston)
pairs(Boston)
corrplot(cor_matrix, method="circle", type="lower", cl.pos = "r", tl.pos = "d", tl.cex = 0.6, tl.col="black")
data_scaled <- scale(Boston)
summary(data_scaled)
class(data_scaled)
data_scaled <- as.data.frame(data_scaled)
crim_scaled <- data_scaled$crim
summary(crim_scaled)
bins <- quantile(crim_scaled)
print(bins)
crime <- cut(crim_scaled, breaks = bins, include.lowest = TRUE, labels=c("low", "med_low", "med_high", "high"))
table(crime)
data_scaled <- dplyr::select(data_scaled, -crim)
data_scaled <- data.frame(data_scaled, crime)
crim_scaled <- data_scaled$crim
summary(crim_scaled)
bins <- quantile(crim_scaled)
crim_scaled <- data_scaled$crim
summary(crim_scaled)
bins <- quantile(crim_scaled)
crim_scaled <- data_scaled$crim
summary(crim_scaled)
bins <- quantile(crim_scaled)
n <- nrow(data_scaled)
ind <- sample(n,  size = n * 0.8)
train <- data_scaled[ind,]
test <- data_scaled[-ind,]
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
lda.fit <- lda(crime ~ ., data_scaled = train)
lda.fit <- lda(crime ~ ., data = train)
lda.fit
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "red", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
classes <- as.numeric(train$crime)
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1)
crim_scaled <- data_scaled$crim
summary(crim_scaled)
bins <- quantile(crim_scaled)
correct_classes <- test$crime
test <- dplyr::select(test, -crime)
lda.pred <- predict(lda.fit, newdata = test)
table(correct = correct_classes, predicted = lda.pred$class)
data("Boston")
data_scaled <- scale(Boston)
data_scaled <- as.data.frame(data_scaled)
dist_eu <- dist(Boston)
dist_eu <- dist(Boston)
dist_eu <- dist(Boston)
summary(dist_eu)
km <-kmeans(dist_eu, centers = 4)
pairs(Boston, col = km$cluster)
set.seed(123)
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
plot(1:k_max, twcss, type='b')
km <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km$cluster)
set.seed(123)
k_max <- 10
twcss <- sapply(1:k_max, function(k){kmeans(dist_eu, k)$tot.withinss})
plot(1:k_max, twcss, type='b')
km <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km$cluster)
km
km
km <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km$cluster)
with(Boston, pairs(dat, col=c(1:3)[km$cluster]))
with(Boston, pairs(Boston, col=c(1:3)[km$cluster]))
pairs(Boston, col = km$cluster[1])
pairs(Boston, col = km$cluster)
?pairs
km <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km$cluster, upper.panel = NULL)
km <-kmeans(dist_eu, centers = 2)
pairs(Boston, col = km$cluster)
km <-kmeans(dist_eu, centers = 3)
lda.fit <- lda(km ~ ., data = train)
km <-kmeans(dist_eu, centers = 3)
km
km$centers
data_scaled <- data.frame(data_scaled, km$centers)
data_scaled
nrow(data_scaled)
nrow(km$centers)
ncol(km$centers)
?data.frame
data_scaled <- data.frame(data_scaled)
data_scaled$centers <- km$centers
?cbind
data_scaled <- cbind(data_scaled, km$centers)
km$centers
class(km$centers)
data_scaled <- cbind(data_scaled, t(km$centers))
data_scaled <- cbind(data_scaled, t(km$centers)[1,])
means <- t(km$centers)
View(means)
data_scaled <- data.frame(data_scaled)
km
pca_human_nonSTD <- prcomp(human_data)
human_data <- read.csv("C:/Users/Tuukka/Desktop/IODS-project/data/humandata.csv")
tmpData <- human_data[c(2:9)]
pca_human_nonSTD <- prcomp(human_data)
pca_human_nonSTD <- prcomp(human_data)
pca_human_nonSTD <- prcomp(tmpData)
summary_pca_nonSTD <- summary(pca_human_nonSTD)
pca_pr_nonSTD <- round(1*s$importance[2, ], digits = 3) * 100
pca_human_nonSTD <- prcomp(tmpData)
summary_pca_nonSTD <- summary(pca_human_nonSTD)
pca_pr_nonSTD <- round(1*summary_pca_nonSTD$importance[2, ], digits = 3) * 100
print(pca_pr_nonSTD)
pc_lab_nonSTD <- paste0(names(pca_pr_nonSTD), " (", pca_pr_nonSTD, "%)")
biplot(pca_human_nonSTD, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pc_lab[1], ylab = pc_lab[2])
pca_human_nonSTD <- prcomp(tmpData)
summary_pca_nonSTD <- summary(pca_human_nonSTD)
pca_pr_nonSTD <- round(1*summary_pca_nonSTD$importance[2, ], digits = 3) * 100
print(pca_pr_nonSTD)
pc_lab_nonSTD <- paste0(names(pca_pr_nonSTD), " (", pca_pr_nonSTD, "%)")
biplot(pca_human_nonSTD, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pc_lab_nonSTD[1], ylab = pc_lab_nonSTD[2])
rownames(human_data) <- human_data$X
human_data <- read.csv("C:/Users/Tuukka/Desktop/IODS-project/data/humandata.csv")
rownames(human_data) <- human_data$X
tmpData <- human_data[c(2:9)]
human_data <- read.csv("C:/Users/Tuukka/Desktop/IODS-project/data/humandata.csv")
rownames(human_data) <- human_data$X
human_data <- select(human_data, -X)
library(MASS)
library(corrplot)
library(tidyverse)
library(tidyr)
library(dplyr)
library(plyr)
library(GGally)
human_data <- read.csv("C:/Users/Tuukka/Desktop/IODS-project/data/humandata.csv")
rownames(human_data) <- human_data$X
human_data <- select(human_data, -X)
tmpData <- human_data[c(2:9)]
summary(human_data)
str(human_data)
ggpairs(human_data)
pca_human_nonSTD <- prcomp(human_data)
summary_pca_nonSTD <- summary(pca_human_nonSTD)
pca_pr_nonSTD <- round(1*summary_pca_nonSTD$importance[2, ], digits = 3) * 100
print(pca_pr_nonSTD)
pc_lab_nonSTD <- paste0(names(pca_pr_nonSTD), " (", pca_pr_nonSTD, "%)")
biplot(pca_human_nonSTD, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pc_lab_nonSTD[1], ylab = pc_lab_nonSTD[2])
human_data_STD <- scale(human_data)
pca_human_STD <- prcomp(human_data_STD)
summary_pca_STD <- summary(pca_human_STD)
pca_pr_STD <- round(1*summary_pca_STD$importance[2, ], digits = 3) * 100
print(pca_pr_STD)
pc_lab_STD <- paste0(names(pca_pr_STD), " (", pca_pr_STD, "%)")
biplot(pca_human_STD, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pc_lab_STD[1], ylab = pc_lab_STD[2])
human_data_STD <- scale(human_data)
pca_human_STD <- prcomp(human_data_STD)
summary_pca_STD <- summary(pca_human_STD)
pca_pr_STD <- round(1*summary_pca_STD$importance[2, ], digits = 3) * 100
print(pca_pr_STD)
pc_lab_STD <- paste0(names(pca_pr_STD), " (", pca_pr_STD, "%)")
biplot(pca_human_STD, cex = c(0.8, 1), col = c("grey40", "deeppink2"), xlab = pc_lab_STD[1], ylab = pc_lab_STD[2])
human_data_STD <- scale(human_data)
pca_human_STD <- prcomp(human_data_STD)
summary_pca_STD <- summary(pca_human_STD)
pca_pr_STD <- round(1*summary_pca_STD$importance[2, ], digits = 3) * 100
print(pca_pr_STD)
pc_lab_STD <- paste0(names(pca_pr_STD), " (", pca_pr_STD, "%)")
biplot(pca_human_STD, cex = c(0.8, 1), col = c("grey40", "red"), xlab = pc_lab_STD[1], ylab = pc_lab_STD[2])
summary_pca_STD
human_data_STD <- scale(human_data)
pca_human_STD <- prcomp(human_data_STD)
summary_pca_STD <- summary(pca_human_STD)
pca_pr_STD <- round(1*summary_pca_STD$importance[2, ], digits = 3) * 100
print(pca_pr_STD)
pc_lab_STD <- paste0(names(pca_pr_STD), " (", pca_pr_STD, "%)")
biplot(pca_human_STD, cex = c(0.8, 1), col = c("grey40", "red"), xlab = pc_lab_STD[1], ylab = pc_lab_STD[2])
biplot(pca_human_STD, cex = c(0.8, 1), col = c("white", "red"), xlab = pc_lab_STD[1], ylab = pc_lab_STD[2])
human_data_STD <- scale(human_data)
pca_human_STD <- prcomp(human_data_STD)
summary_pca_STD <- summary(pca_human_STD)
pca_pr_STD <- round(1*summary_pca_STD$importance[2, ], digits = 3) * 100
print(pca_pr_STD)
pc_lab_STD <- paste0(names(pca_pr_STD), " (", pca_pr_STD, "%)")
biplot(pca_human_STD, cex = c(0.8, 1), col = c("grey40", "red"), xlab = pc_lab_STD[1], ylab = pc_lab_STD[2])
human_data_STD <- scale(human_data)
pca_human_STD <- prcomp(human_data_STD)
summary_pca_STD <- summary(pca_human_STD)
pca_pr_STD <- round(1*summary_pca_STD$importance[2, ], digits = 3) * 100
print(pca_pr_STD)
pc_lab_STD <- paste0(names(pca_pr_STD), " (", pca_pr_STD, "%)")
biplot(pca_human_STD, cex = c(0.8, 1), col = c("white", "red"), xlab = pc_lab_STD[1], ylab = pc_lab_STD[2])
human_data_STD <- scale(human_data)
pca_human_STD <- prcomp(human_data_STD)
summary_pca_STD <- summary(pca_human_STD)
pca_pr_STD <- round(1*summary_pca_STD$importance[2, ], digits = 3) * 100
print(pca_pr_STD)
pc_lab_STD <- paste0(names(pca_pr_STD), " (", pca_pr_STD, "%)")
biplot(pca_human_STD, cex = c(0.8, 1), col = c("grey40", "red"), xlab = pc_lab_STD[1], ylab = pc_lab_STD[2])
library(FactoMineR)
install.packages("FactoMineR")
library(FactoMineR)
tea_data <- tea
tea_data <- data(tea)
?tea
data(tea)
View(tea)
data(tea)
str(tea)
data(tea)
keep_columns <- c("Tea", "How", "pub", "dinner", "resto", "price", "tearoom")
tea_data <- select(tea, one_of(keep_columns))
str(tea_data)
summary(tea_data)
data(tea)
keep_columns <- c("Tea", "How", "pub", "dinner", "resto", "price", "tearoom")
tea_data <- select(tea, one_of(keep_columns))
str(tea_data)
summary(tea_data)
str(tea_data)
data(tea)
keep_columns <- c("Tea", "How", "pub", "dinner", "resto", "price", "tearoom")
tea_data <- select(tea, one_of(keep_columns))
str(tea_data)
summary(tea_data)
ggpairs(tea_data)
ggpairs(tea_data)
gather(tea_data) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 8))
mca_tea <- MCA(tea_data, graph = FALSE)
mca_tea <- MCA(tea_data, graph = FALSE)
summary(mca)
summary(mca_tea)
?MCA
mca_tea <- MCA(tea_data, ncp = 5 graph = FALSE)
mca_tea <- MCA(tea_data, ncp = 5, graph = FALSE)
summary(mca_tea)
mca_tea <- MCA(tea_data, ncp = 2, graph = FALSE)
summary(mca_tea)
mca_tea <- MCA(tea_data, ncp = 5, graph = FALSE)
summary(mca_tea)
mca_tea <- MCA(tea_data, ncp = 5, graph = FALSE)
summary(mca_tea)
plot(mca_tea, invisible=c("ind"), habillage = "quali")
mca_tea <- MCA(tea_data, ncp = 5, graph = FALSE)
summary(mca_tea)
plot(mca_tea, invisible=c("ind"), habillage = "quali")
fviz_contrib(mca_tea, choice = "var", axes = 1)
install.packages("factoextra")
library(factoextra)
fviz_contrib(mca_tea, choice = "var", axes = 1)
fviz_contrib(mca_tea, choice = "var", axes = 2)
mca_tea <- MCA(tea_data, ncp = 5, graph = FALSE)
summary(mca_tea)
plot(mca_tea, invisible=c("ind"), habillage = "quali")
fviz_contrib(mca_tea, choice = "var", axes = 1)
fviz_contrib(mca_tea, choice = "var", axes = 2)
mca_tea <- MCA(tea_data, ncp = 5, graph = FALSE)
summary(mca_tea)
plot(mca_tea, invisible=c("ind"), habillage = "quali")
fviz_contrib(mca_tea, choice = "var", axes = 1)
fviz_contrib(mca_tea, choice = "var", axes = 2)
fviz_contrib(mca_tea, choice = "var", axes = 3)
human_data <- read.csv("C:/Users/Tuukka/Desktop/IODS-project/data/humandata.csv")
rownames(human_data) <- human_data$X
human_data <- select(human_data, -X)
human_data <- read.csv("C:/Users/Tuukka/Desktop/IODS-project/data/humandata.csv")
#Tuukka Kangas
#tuukka.kangas@helsinki.fi
#26th February, 2017
#This script is for the data wrangling for the final assignment in IODS course.
#The data is described better in the index file.
#The used dataset is Trust and Quality of Local Governance in European cities
#Source http://data.europa.eu/euodp/en/data/dataset/jrc-coin-regio-trust-and-quality-of-local-governance-in-european-cities-2011-2014
#Needed packages
library(dplyr)
#Reading original csv-file
setwd("C:/Users/Tuukka/Desktop/IODS-final")
full_data = read.csv("gov_data_org.csv", sep=";", dec=".", header = TRUE)
####################
#Reducing varibles
#In 56 varibles there is 11 variables that contains at least one observation that have missing value.
#Because there will remain 45 variables - that is more than enough for my purposes - I removed all variables that have at least one missing value
data_narmv <- full_data[ , apply(full_data, 2, function(x) !any(is.na(x)))]
#Because the amount of variables is still quite big, I reduced the number of variables
#For the reducing I created some sum variables
#Trust, combines three variables that covers trust in different authorities
data_narmv <- mutate(data_narmv, trust = (data_narmv$rq17b_mean + data_narmv$rq17d_mean + data_narmv$rq17e_mean) / 3)
data_narmv <- dplyr::select(data_narmv, -starts_with("rq17"))
#Corruption, four variables that covers corruption in different authorities
data_narmv <- mutate(data_narmv, corruption = (data_narmv$rq18a_mean + data_narmv$rq18b_mean + data_narmv$rq18d_mean + data_narmv$rq18e_mean) / 4)
data_narmv <- dplyr::select(data_narmv, -starts_with("rq18"))
#Freedom, 12 variables that covers citicens freedom
data_narmv$freedom <- rowMeans(subset(data_narmv, select = c(rq38c_mean, rq38d_mean, rq38e_mean, rq38f_mean, rq34a_mean, rq34b_mean, rq34c_mean, rq34d_mean, rq34e_mean, rq34f_mean, rq34g_mean, rq34h_mean)), na.rm = TRUE)
data_narmv <- dplyr::select(data_narmv, -starts_with("rq34"))
data_narmv <- dplyr::select(data_narmv, -starts_with("rq38"))
#Bribe, five variables that covers giving bribe to the authorities
data_narmv$bribe <- rowMeans(subset(data_narmv, select = c(rq36a_mean, rq36b_mean, rq36c_mean, rq36d_mean, rq36e_mean)), na.rm = TRUE)
data_narmv <- dplyr::select(data_narmv, -starts_with("rq36"))
#House demolition, two variables covering situation if the house demolition is unfair
data_narmv <- mutate(data_narmv, houdem = (data_narmv$rq1b_1_mean + (1- data_narmv$rq1b_3_mean)) / 2)
data_narmv <- dplyr::select(data_narmv, -starts_with("rq1b"))
#Business fines, two variables covering if small business are fined if let taxes paid or not do equired documentation
data_narmv <- mutate(data_narmv, busfine = (data_narmv$rq13a_mean + data_narmv$rq13b_mean) / 2)
data_narmv <- dplyr::select(data_narmv, -starts_with("rq13"))
#Openess of local government
data_narmv <- mutate(data_narmv, govopen = (data_narmv$rq15d_mean + data_narmv$rq15b_mean) / 2)
data_narmv <- dplyr::select(data_narmv, -starts_with("rq15"))
#Lawful, police and court
data_narmv$lawful <- rowMeans(subset(data_narmv, select = c(rq37a_mean, rq37b_mean, rq37c_mean, rq37d_mean)), na.rm = TRUE)
data_narmv <- dplyr::select(data_narmv, -starts_with("rq37"))
#Some variables are just removed
data_narmv <- dplyr::select(data_narmv, -starts_with("rq7"))
data_narmv <- dplyr::select(data_narmv, -starts_with("rq11"))
#Naming other columns
colnames(data_narmv)[which(names(data_narmv) == "rq1c_mean")] <- "faircourt"
colnames(data_narmv)[which(names(data_narmv) == "rq14_mean")] <- "safe"
colnames(data_narmv)[which(names(data_narmv) == "rq30_mean")] <- "break"
colnames(data_narmv)[which(names(data_narmv) == "rq29_mean")] <- "workdis"
#After grouping and removing some variables there is still 12(+2) variables to describe the cities. It seems to be enough and too much data is not lost in the process
View(data_narmv)
data_narmv<-data_narmv[!(data_narmv$city=="Other",]
#Naming columns
colnames(data_narmv)[which(names(data_narmv) == "rq1c_mean")] <- "faircourt"
colnames(data_narmv)[which(names(data_narmv) == "rq14_mean")] <- "safe"
colnames(data_narmv)[which(names(data_narmv) == "rq30_mean")] <- "break"
colnames(data_narmv)[which(names(data_narmv) == "rq29_mean")] <- "workdis"
data_narmv <- data_narmv[!(data_narmv$city=="Other"), ]
View(data_narmv)
pop_data = read.csv("populations.csv", sep=";", dec=".", header = TRUE)
pop_data$share = pop_data$cityPop / pop_data$countryPop
data_final <- merge(data_narmv, pop_data,by="city")
data_final <- dplyr::select(data_final, -starts_with("countryP))
data_final <- dplyr::select(data_final, -starts_with("countryP"))
data_final <- dplyr::select(data_final, -starts_with("countryP"))
colnames(data_final)[which(names(data_final) == "cityPop")] <- "citypop"
data_final$citypop <- data_final$citypop / 1000
View(c)
write.csv(data_final, file="trustdata.csv")
trust_data <- read.csv("C:/Users/Tuukka/Desktop/IODS-final/trustdata.csv", sep=";", dec=".", header = TRUE)
trust_data <- read.csv("C:/Users/Tuukka/Desktop/IODS-final/trustdata.csv", sep=",", dec=".", header = TRUE)
trust_data <- read.csv("C:/Users/Tuukka/Desktop/IODS-final/trustdata.csv", sep=",", dec=".", header = TRUE)
rownames(trust_data) <- trust_data$city
trust_data <- dplyr::select(trust_data, -X)
trust_data <- dplyr::select(trust_data, -city)
View(trust_data)
#Reading the dataset. After reading citynames are used as rownames so after that running number and citynames can be removed from the dataset
trust_dataTMP <- read.csv("C:/Users/Tuukka/Desktop/IODS-final/trustdata.csv", sep=",", dec=".", header = TRUE)
rownames(trust_dataTMP) <- trust_dataTMP$city
trust_dataTMP <- dplyr::select(trust_dataTMP, -X)
trust_dataTMP <- dplyr::select(trust_dataTMP, -city)
#Reading the dataset. After reading citynames are used as rownames so after that running number and citynames can be removed from the dataset
trust_dataTMP <- read.csv("https://github.com/tvkangas/IODS-final/blob/master/trustdata.csv", sep=",", dec=".", header = TRUE)
rownames(trust_dataTMP) <- trust_dataTMP$city
trust_dataTMP <- dplyr::select(trust_dataTMP, -X)
trust_dataTMPLOL <- read.csv("https://github.com/tvkangas/IODS-final/blob/master/trustdata.csv", sep=",", dec=".", header = TRUE)
View(trust_dataTMPLOL)
trust_dataTMPLOL <- read.csv("https://raw.githubusercontent.com/tvkangas/IODS-final/master/trustdata.csv", sep=",", dec=".", header = TRUE)
#Reading the dataset. After reading citynames are used as rownames so after that running number and citynames can be removed from the dataset
trust_dataTMP <- read.csv("https://raw.githubusercontent.com/tvkangas/IODS-final/master/trustdata.csv", sep=",", dec=".", header = TRUE)
rownames(trust_dataTMP) <- trust_dataTMP$city
trust_dataTMP <- dplyr::select(trust_dataTMP, -X)
trust_dataTMP <- dplyr::select(trust_dataTMP, -city)
